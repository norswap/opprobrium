// SPDX-License-Identifier: BSD-3-Clause-Clear
pragma solidity ^0.8.0;

// DO NOT EDIT â€” AUTO-GENERATED BY packages/data/buildings/buildings.mjs

import {BuildingType, BuildingLevelInfo} from "./Buildings.sol";

abstract contract BuildingsData {
    // Maps (building type, level) to building level info.
    mapping(BuildingType => mapping(uint32 => BuildingLevelInfo)) internal levelInfo;

    constructor() {
        // Mineral Mine

    <%_ mineral_mine.forEach(function(lvl){ _%>
        levelInfo[BuildingType.MINERAL_MINE][<%= lvl.level %>] = BuildingLevelInfo({
            costMineral: <%= lvl.costMineral %>,
            costGas: <%= lvl.costGas %>,
            costDeuterium: <%= lvl.costDeuterium %>,
            productionRate: <%= lvl.productionRate %>,
            constructionTime: <%= lvl.constructionTime %>
        });
    <%_ }); _%>

        // Gas Extractor

    <%_ gas_extractor.forEach(function(lvl){ _%>
        levelInfo[BuildingType.GAS_EXTRACTOR][<%= lvl.level %>] = BuildingLevelInfo({
            costMineral: <%= lvl.costMineral %>,
            costGas: <%= lvl.costGas %>,
            costDeuterium: <%= lvl.costDeuterium %>,
            productionRate: <%= lvl.productionRate %>,
            constructionTime: <%= lvl.constructionTime %>
        });
    <%_ }); _%>

        // Deuterium Synthesizer

    <%_ deuterium_synthesizer.forEach(function(lvl){ _%>
        levelInfo[BuildingType.DEUTERIUM_SYNTHESIZER][<%= lvl.level %>] = BuildingLevelInfo({
            costMineral: <%= lvl.costMineral %>,
            costGas: <%= lvl.costGas %>,
            costDeuterium: <%= lvl.costDeuterium %>,
            productionRate: <%= lvl.productionRate %>,
            constructionTime: <%= lvl.constructionTime %>
        });
    <%_ }); _%>
    }
}
